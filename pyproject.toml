[project]
name = "tseda"
dynamic = ["version"]
description = "Tree sequence exploratory data analysis"
authors = [{ name = "Per Unneberg", email = "per.unneberg@scilifelab.se" }]
dependencies = [
  "panel>=1.6.0",
  "tskit>=0.6.0",
  "tszip>=0.2.4",
  "click>=8.2.1",
  "daiquiri>=3.2.5.1",
  "holoviews>=1.19.1",
  "numba>=0.61.2",
  "diskcache>=5.6.3",
  "appdirs>=1.4.4",
  "geoviews>=1.13.0",
  "cartopy>=0.23.0",
  "geopandas>=1.0.1",
  "dask[dataframe]>=2024.8.1",
  "hvplot>=0.11.1",
  "xyzservices>=2024.6.0",
  "numcodecs<0.16",
  "tornado>=6.4.1",
  "zarr<3",
]
readme = "README.md"
requires-python = ">= 3.12"
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Development Status :: 3 - Alpha",
  "Environment :: Other Environment",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX",
  "Operating System :: MacOS :: MacOS X",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
]
keywords = [
  "population genetics",
  "tree sequence",
  "ancestral recombination graph",
  "evolutionary tree",
  "statistical genetics",
  "phylogenetics",
  "tskit",
  "visualization",
]

[dependency-groups]
dev = [
  "geodatasets>=2024.8.0",
  "hatch-vcs>=0.5.0",
  "jupyter>=1.0.0",
  "pip>=25.2",
  "pyright>=1.1.405",
  "pytest>=8.4.2",
  "pytest-playwright>=0.7.1",
  "stdpopsim>=0.3.0",
  "watchfiles>=1.1.0",
]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.hooks.vcs]
version-file = "src/tseda/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/tseda"]

[project.scripts]
"tseda" = "tseda:main"

[tool.ruff]
target-version = "py312"
line-length = 79

[tool.ruff.lint]
select = [
  "A",    # warn about shadowing built-ins
  "E",    # style stuff, whitespaces
  "F",    # important pyflakes lints
  "I",    # import sorting
  "N",    # naming
  "T100", # breakpoints
]
ignore = ["N806"]

[tool.ruff.lint.isort]
# so it knows to group first-party stuff last
known-first-party = ["tseda"]

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["src"]
pythonVersion = "3.12"             # _lowest_ supported version
reportMissingTypeStubs = false
reportAttributeAccessIssue = false
reportCallIssue = false
reportOptionalMemberAccess = false
reportAssignmentType = false
reportArgumentType = false

[tool.pytest.ini_options]
addopts = "--doctest-modules --ignore src/tseda/main.py"

[tool.pixi.workspace]
channels = ["conda-forge", "bioconda"]
platforms = ["linux-64", "osx-64"]

[tool.pixi.pypi-dependencies]
tseda = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
lint = { features = ["lint"], solve-group = "default" }
quarto = { features = ["quarto"], solve-group = "default" }

[tool.pixi.feature.lint.dependencies]
pre-commit = ">=4.2.0,<5"
pre-commit-hooks = ">=5.0.0,<6"
shellcheck = ">=0.10.0,<0.11"
ruff = ">=0.11.11,<0.12"
typos = ">=1.32.0,<2"
actionlint = ">=1.7.7,<2"
go-shfmt = ">=3.11.0,<4"
prettier = ">=3.5.3,<4"
taplo = ">=0.9.3,<0.10"

[tool.pixi.feature.lint.tasks]
actionlint = { cmd = "actionlint", env = { SHELLCHECK_OPTS = "-e SC2086" }, description = "Lint github actions file." }
lintall = { cmd = "pre-commit run --all-files --hook-stage=manual", description = "Run all linters and formatters on all code." }
lint = { cmd = "pre-commit run --hook-stage=manual", description = "Run all linters and formatters on staged code." }
pre-commit-install = { cmd = "pre-commit install --install-hooks -t=pre-commit -t=pre-push", description = "Install pre-commit dependencies." }
pre-commit-install-minimal = { cmd = "pre-commit install -t=pre-commit", description = "Install minimal list of pre-commit dependencies." }
pre-commit-run = { cmd = "pre-commit run --all-files", description = "Run pre-commit on all files." }
prettier-fmt = { cmd = "prettier --write", description = "Run prettier code formatter." }
ruff-format = { cmd = "ruff format --force-exclude", description = "Run ruff Python formatter." }
ruff-lint = { cmd = "ruff check --fix --exit-non-zero-on-fix --force-exclude", description = "Run ruff Python linter." }
shell-format = { cmd = "shfmt --write --indent=4 --simplify --binary-next-line", description = "Run a shell formatter." }
toml-format = { cmd = "taplo fmt **/*.toml", env = { RUST_LOG = "warn" }, description = "Run taplo toml formatter." }
toml-lint = { cmd = "taplo lint --verbose **/*.toml", description = "Run taplo toml linter." }
typecheck-python = { cmd = "mypy", description = "Run mypy Python type checker." }
typos = { cmd = "typos --write-changes --force-exclude", description = "Run typos checker." }

[tool.pixi.feature.quarto.dependencies]
quarto = "*"
jupyter = ">=1.1.1,<2"
jupytext = ">=1.17.3,<2"
quartodoc = ">=0.11.1,<0.12"

[tool.pixi.feature.quarto.tasks.pv]
args = [{ "arg" = "port", default = "8880" }]
cmd = "quarto preview docs --port {{port}}"

[tool.pixi.feature.quarto.tasks.rd]
cmd = "quarto render docs"

[tool.pixi.feature.dev.tasks.dev]
args = [
  { "arg" = "port", default = "8881" },
  { "arg" = "input", default = "tests/data/test.trees.tsdate.tseda" },
]
cmd = "uv run panel serve src/tseda --dev --show --port {{port}} --args {{input}}"

[tool.pixi.feature.dev.tasks.admin]
args = [
  { "arg" = "port", default = "8882" },
  { "arg" = "input", default = "tests/data/test.trees.tsdate.tseda" },
]
cmd = "uv run python -m tseda serve {{input}} --admin --port {{port}}"

[tool.pixi.feature.dev.tasks.serve]
args = [
  { "arg" = "port", default = "8883" },
  { "arg" = "input", default = "tests/data/test.trees.tsdate.tseda" },
]
cmd = "uv run python -m tseda serve {{input}} --port {{port}}"

[tool.pixi.tasks]
test = "uv run pytest -v -s"
