[
  {
    "objectID": "notebook.html",
    "href": "notebook.html",
    "title": "tseda in the notebook",
    "section": "",
    "text": "This notebook provides a minimum working example of how to load a tseda file into a notebook and how to make use of the application widgets as standalone objects. The example is based on the test file test.trees.tsdate.tseda that can be found in the tests data folder.\nNote that the API is still in development and that this notebook is meant to showcase basic functionality as currently implemented. Notably, it is currently not possible to modify the size of widgets, and accessing individual plots would benefit from an improved method naming system."
  },
  {
    "objectID": "notebook.html#module-setup",
    "href": "notebook.html#module-setup",
    "title": "tseda in the notebook",
    "section": "Module setup",
    "text": "Module setup\nFirst load the relevant tseda modules and panel extension for tables.\n\nimport panel as pn\npn.extension(\"tabulator\")\nfrom tseda import datastore, model, vpages\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe datastore module defines the classes that are used by all application pages, namely\n\nSampleSetsTable: manages and displays information about sample sets\nIndividualsTable: handles individual data, such as population and sample set assignments\nDataStore: provides access to the underlying TreeSequence data as well as the tables described above\n\nmodel defines a model of the tree sequence data called TSModel. This is a modified version of tsbrowse.model.TSModel.\nFinally, vpages holds a mapping to the application pages and widgets which can be instantiated by calling the relevant constructor method."
  },
  {
    "objectID": "notebook.html#setting-up-the-datastore",
    "href": "notebook.html#setting-up-the-datastore",
    "title": "tseda in the notebook",
    "section": "Setting up the datastore",
    "text": "Setting up the datastore\nWe instantiate a model.TSModel by providing a path to a tseda file:\n\ntsm = model.TSModel(\"../tests/data/test.trees.tsdate.tseda\")\ntype(tsm)\n\ntseda.model.TSModel\n\n\nNote that the input tseda file must have been generated by running tseda preprocess on an input compressed tree sequence file. In order to instantiate a datastore.DataStore object, we first need to generate two tables.\nWe first make the SampleSetsTable.\n\nsample_sets_table = datastore.make_sample_sets_table(tsm)\n\nThis table defines the sample sets used in the analyses. The starting table consists of the populations defined in the input tree sequence file, but custom sample sets can be added later on. Names and colors can be edited.\nNext we load the IndividualsTable. We need to connect it to the current sample_sets_table and we set the page_size attribute to reduce the number of individuals shown by default.\n\nindividuals_table = datastore.make_individuals_table(tsm)\n# NB: this is a bug; we need to set the sample_sets_table manually\nindividuals_table.sample_sets_table = sample_sets_table\nindividuals_table.page_size = 10\nindividuals_table\n\n\n\n\n\n  \n\n\n\n\nBriefly, this table displays the individual samples and corresponding metadata, such as population, name, longitude, and latitude. Note the distinction between population, which is immutable and corresponds to the original population assignment in the input tree sequence file, and sample_set_id, which is a placeholder for the current population assignment. By modifying this column, we can make arbitrary population (sample set) assignments to individual samples. Finally, the selected column lets us exclude samples from subsequent analyses.\nWith these three data structures in place, we can now define the datastore.DataStore model:\n\nds = datastore.DataStore(tsm=tsm, individuals_table=individuals_table,\n    sample_sets_table=sample_sets_table)"
  },
  {
    "objectID": "notebook.html#accessing-vpages",
    "href": "notebook.html#accessing-vpages",
    "title": "tseda in the notebook",
    "section": "Accessing vpages",
    "text": "Accessing vpages\nThe vpages module has an attribute PAGES that lists the available application pages:\n\nvpages.PAGES\n\n[tseda.vpages.overview.OverviewPage,\n tseda.vpages.individuals.IndividualsPage,\n tseda.vpages.structure.StructurePage,\n tseda.vpages.ignn.IGNNPage,\n tseda.vpages.stats.StatsPage,\n tseda.vpages.trees.TreesPage]\n\n\nEvery page is instantiated by passing along the ds object, as we show in the subsequent sections.\n\nOverview\nThe overview page summarizes the tree sequence object.\n\nov = vpages.PAGES[0](datastore=ds)\nov\n\n\n\n\n\n  \n\n\n\n\n\n\nIndividuals page\nThe individuals page displays three widgets:\n\na map with sampling locations\nthe sample set table\nthe individuals table.\n\n\nindp = vpages.PAGES[1](datastore=ds)\nindp\n\n\n\n\n\n\n\n\n  \n\n\n\n\nEach widget can be accessed by calling the corresponding attributes, which here are geomap, sample_sets_table, and individuals_table.\nThe individuals page also has a sidebar function which is used in the application to modify tables, assign new sample sets and so on. This functionality does not yet work in the notebook setting however, so any modification of the datastore object must be done by editing the object manually.\n\n\nStructure\nThe structure page summarizes population-wide genealogical nearest neighbor (GNN) values and \\(F_{st}\\).\n\nstruct = vpages.PAGES[2](datastore=ds)\nstruct\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nIndividual GNN\nThe indivdual GNN page displays three widgets:\n\na map with sampling locations\na bar plot of individual-based GNN values, based on the current sample set definitions\na widget, initially empty, for plotting chromosome-level GNN values\n\nInstead of drawing the entire page, we here show how to access the initial widgets, starting with the bar plot of individual GNN values:\n\nignn = vpages.PAGES[3](datastore=ds)\nignn.vbar\n\n\n\n\n\n  \n\n\n\n\nNote that the plot is interactive and that you have a variety of bokeh tools, displayed on the right, to choose from, to interact with the plot.\nAs mentioned, the chromosome level GNN is empty to begin with:\n\nignn.gnnhaplotype\n\n\n\n\n\n  \n\n\n\n\nHowever, we can set the individual_id attribute to actually plot the haplotypes. Note that these values are calculated on the fly and may be slow for large samples!\n\nignn.gnnhaplotype.individual_id = 12\nignn.gnnhaplotype\n\n0it [00:00, ?it/s]199it [00:00, 6730.26it/s]\nWARNING:param.main: sizing_mode option not found for area plot with bokeh; similar options include: []\n0it [00:00, ?it/s]199it [00:00, 8632.75it/s]\nWARNING:param.main: sizing_mode option not found for area plot with bokeh; similar options include: []\n\n\n\n\n\n0it [00:00, ?it/s]199it [00:00, 9942.78it/s]\nWARNING:param.main: sizing_mode option not found for area plot with bokeh; similar options include: []\n0it [00:00, ?it/s]199it [00:00, 9807.14it/s]\nWARNING:param.main: sizing_mode option not found for area plot with bokeh; similar options include: []\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\nStatistics\nTree sequence statistics come in two flavors, one-way that are defined over single sample sets, and multi-way that compare two or more sample sets. The one-way statistics are accessible via the oneway attribute:\n\nstats = vpages.PAGES[4](datastore=ds)\nstats.oneway\n\n\n\n\n\n\n\n\n  \n\n\n\n\nFor multi-way statistics we need to set which sample sets to compare. Here, we can make use of the sidebar functionality, or set sample set groups, formatted (exactly) as INDEX1 & INDEX2:\n\nstats.multiway.comparisons.value = ['0 & 1', '0 & 2']\nstats.multiway\n\n\n\n\n\n\n\n\n  \n\n\n\n\nHere, the indexes correspond to sample set ids.\n\n\nTrees\nFinally, we can draw trees accessed by genomic position or index in the tree sequence:\n\ntrees = vpages.PAGES[5](datastore=ds)\ntrees.data.position = 10_000\ntrees\n\n\n\n\n\n  \n\n\n\n\n\ntrees.sidebar()\n\nWARNING:param.ParamMethod01936: The method supplied for Panel to display was declared with `watch=True`, which will cause the method to be called twice for any change in a dependent Parameter. `watch` should be False when Panel is responsible for displaying the result of the method call, while `watch=True` should be reserved for methods that work via side-effects, e.g. by modifying internal state of a class or global state in an application's namespace.\n\n\n\n\n\n\n  \n\n\n\n\nThe slider can be used to modify the current position. The trees page actually renders the trees.data attribute, which is where we can also set tree attributes manually. For instance, to increase the number of shown trees to three, we can set trees.data.num_trees.value=3."
  },
  {
    "objectID": "notebook.html#conclusion",
    "href": "notebook.html#conclusion",
    "title": "tseda in the notebook",
    "section": "Conclusion",
    "text": "Conclusion\nThis notebook shows the basic functionality of tseda plotting widgets."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "tseda documentation",
    "section": "",
    "text": "Tree Sequence Exploratory Data Analysis. Currently builds on code base in tsbrowse and retains some of the functionality. tseda adds functionality to view the spatial distribution of population data and connect that information to the genetic structure of the populations.\nThe input trees file must be tszipped and preprocessed into a tsbrowse file. Given a trees file data.trees the following commands perform compression and preprocessing of the file\ntszip data.trees python -m tseda preprocess data.trees.tsz\nto produce the output data.trees.tseda. To launch the web app run\npython -m tseda serve data.trees.tseda\nAlthough tseda is primarily an interactive application that runs in the browser, you can also use tseda in the notebook."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "tseda documentation",
    "section": "Installation",
    "text": "Installation\ntseda is currently in development. To install the latest dev version from github, run\npython -m pip install git+https://github.com/tforest/tseda"
  },
  {
    "objectID": "index.html#features-wip",
    "href": "index.html#features-wip",
    "title": "tseda documentation",
    "section": "Features (WIP)",
    "text": "Features (WIP)\n\nsample set editor to customize sample set definitions, names and colors\nsummary statistics (Fst, genealogical nearest neighbours (GNN)) compared and averaged over sample sets\ngenealogical nearest neighbour (GNN) analyses of samples\nplots of common summary statistics over sequence length (diversity, Tajimas_D, divergence, Fst)\nmarginal tree plots\npairwise coalescence plots"
  },
  {
    "objectID": "index.html#tests",
    "href": "index.html#tests",
    "title": "tseda documentation",
    "section": "Tests",
    "text": "Tests\nThe package comes with test data files corresponding to an uncompressed trees file (test.trees), a tszipped trees file (test.trees.tsz), and two tseda files (test.trees.tseda and time-calibrated test.trees.tsdate.tseda) residing in tests/data. To try out the web app, load the file tests/data/test.trees.tseda as described above."
  }
]